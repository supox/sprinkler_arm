<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\TestPP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\TestPP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Sat Jan 05 21:05:04 2013
<BR><P>
<H3>Maximum Stack Usage =        856 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Sprinkler::Sprinkler() &rArr; Sprinkler::load_config() &rArr; Sprinkler::load_sensors_config() &rArr; JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::token_to_double(const char*, JSON::jsmntok_t*, double&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[14b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NMI_Handler</a><BR>
 <LI><a href="#[12]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">HardFault_Handler</a><BR>
 <LI><a href="#[13]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">MemManage_Handler</a><BR>
 <LI><a href="#[14]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BusFault_Handler</a><BR>
 <LI><a href="#[15]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">UsageFault_Handler</a><BR>
 <LI><a href="#[16]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">SVC_Handler</a><BR>
 <LI><a href="#[17]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">DebugMon_Handler</a><BR>
 <LI><a href="#[18]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">PendSV_Handler</a><BR>
 <LI><a href="#[2c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from buttonsmanager.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from buttonsmanager.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from timemanager.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[45]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[1c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[58]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[57]">__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[5a]">Irrigation::Irrigation()</a> from irrigation.o(.text) referenced from json.o(t._ZN6VectorI10IrrigationE12ResizeBufferEj)
 <LI><a href="#[4a]">Irrigation::~Irrigation()</a> from irrigation.o(.text) referenced from sprinkler.o(.text)
 <LI><a href="#[4a]">Irrigation::~Irrigation()</a> from irrigation.o(.text) referenced from json.o(t._ZN6VectorI10IrrigationE12ResizeBufferEj)
 <LI><a href="#[60]">MockSensor::read_sensor(double&)</a> from mocksensor.o(.text) referenced from mocksensor.o(.constdata__ZTV10MockSensor)
 <LI><a href="#[5f]">MockSensor::get_type()</a> from mocksensor.o(.text) referenced from mocksensor.o(.constdata__ZTV10MockSensor)
 <LI><a href="#[5e]">MockSensor::~MockSensor__deallocating()</a> from mocksensor.o(.text) referenced from mocksensor.o(.constdata__ZTV10MockSensor)
 <LI><a href="#[5d]">MockSensor::~MockSensor()</a> from mocksensor.o(.text) referenced from mocksensor.o(.constdata__ZTV10MockSensor)
 <LI><a href="#[62]">LedsManager::~LedsManager__deallocating()</a> from ledsmanager.o(.text) referenced from ledsmanager.o(.constdata__ZTV11LedsManager)
 <LI><a href="#[61]">LedsManager::~LedsManager()</a> from ledsmanager.o(.text) referenced from ledsmanager.o(.constdata__ZTV11LedsManager)
 <LI><a href="#[66]">WaterSensor::read_sensor(double&)</a> from watersensor.o(.text) referenced from watersensor.o(.constdata__ZTV11WaterSensor)
 <LI><a href="#[65]">WaterSensor::get_type()</a> from watersensor.o(.text) referenced from watersensor.o(.constdata__ZTV11WaterSensor)
 <LI><a href="#[64]">WaterSensor::~WaterSensor__deallocating()</a> from watersensor.o(.text) referenced from watersensor.o(.constdata__ZTV11WaterSensor)
 <LI><a href="#[63]">WaterSensor::~WaterSensor()</a> from watersensor.o(.text) referenced from watersensor.o(.constdata__ZTV11WaterSensor)
 <LI><a href="#[5b]">SmartPointer&lang;Valf&rang;::SmartPointer()</a> from json.o(t._ZN12SmartPointerI4ValfEC1Ev) referenced from json.o(t._ZN6VectorI12SmartPointerI4ValfEE12ResizeBufferEj)
 <LI><a href="#[4b]">SmartPointer&lang;Valf&rang;::~SmartPointer()</a> from json.o(t._ZN12SmartPointerI4ValfED1Ev) referenced from sprinkler.o(.text)
 <LI><a href="#[4b]">SmartPointer&lang;Valf&rang;::~SmartPointer()</a> from json.o(t._ZN12SmartPointerI4ValfED1Ev) referenced from json.o(t._ZN6VectorI12SmartPointerI4ValfEE12ResizeBufferEj)
 <LI><a href="#[5c]">SmartPointer&lang;Alarm&rang;::SmartPointer()</a> from json.o(t._ZN12SmartPointerI5AlarmEC1Ev) referenced from json.o(t._ZN6VectorI12SmartPointerI5AlarmEE12ResizeBufferEj)
 <LI><a href="#[4c]">SmartPointer&lang;Alarm&rang;::~SmartPointer()</a> from json.o(t._ZN12SmartPointerI5AlarmED1Ev) referenced from sensor.o(.text)
 <LI><a href="#[4c]">SmartPointer&lang;Alarm&rang;::~SmartPointer()</a> from json.o(t._ZN12SmartPointerI5AlarmED1Ev) referenced from json.o(t._ZN6VectorI12SmartPointerI5AlarmEE12ResizeBufferEj)
 <LI><a href="#[48]">SmartPointer&lang;Sensor&rang;::SmartPointer()</a> from json.o(t._ZN12SmartPointerI6SensorEC1Ev) referenced from json.o(.text)
 <LI><a href="#[48]">SmartPointer&lang;Sensor&rang;::SmartPointer()</a> from json.o(t._ZN12SmartPointerI6SensorEC1Ev) referenced from json.o(t._ZN6VectorI12SmartPointerI6SensorEE12ResizeBufferEj)
 <LI><a href="#[49]">SmartPointer&lang;Sensor&rang;::~SmartPointer()</a> from json.o(t._ZN12SmartPointerI6SensorED1Ev) referenced 2 times from json.o(.text)
 <LI><a href="#[49]">SmartPointer&lang;Sensor&rang;::~SmartPointer()</a> from json.o(t._ZN12SmartPointerI6SensorED1Ev) referenced from json.o(t._ZN6VectorI12SmartPointerI6SensorEE12ResizeBufferEj)
 <LI><a href="#[6a]">BatterySensor::read_sensor(double&)</a> from batterysensor.o(.text) referenced from batterysensor.o(.constdata__ZTV13BatterySensor)
 <LI><a href="#[69]">BatterySensor::get_type()</a> from batterysensor.o(.text) referenced from batterysensor.o(.constdata__ZTV13BatterySensor)
 <LI><a href="#[68]">BatterySensor::~BatterySensor__deallocating()</a> from batterysensor.o(.text) referenced from batterysensor.o(.constdata__ZTV13BatterySensor)
 <LI><a href="#[67]">BatterySensor::~BatterySensor()</a> from batterysensor.o(.text) referenced from batterysensor.o(.constdata__ZTV13BatterySensor)
 <LI><a href="#[6c]">LedButtonListener::OnButtonPressed(unsigned)</a> from main.o(i._ZN17LedButtonListener15OnButtonPressedEj) referenced from main.o(.constdata__ZTV17LedButtonListener)
 <LI><a href="#[6d]">LedButtonListener::TimeNotification()</a> from main.o(i._ZN17LedButtonListener16TimeNotificationEv) referenced from main.o(.constdata__ZTV17LedButtonListener)
 <LI><a href="#[4d]">TimeListenersList::~TimeListenersList()</a> from timelistenerslist.o(.text) referenced from timemanager.o(.text)
 <LI><a href="#[70]">Sensor::~Sensor__deallocating()</a> from sensor.o(.text) referenced from sensor.o(.constdata__ZTV6Sensor)
 <LI><a href="#[6f]">Sensor::~Sensor__sub_object()</a> from sensor.o(.text) referenced from sensor.o(.constdata__ZTV6Sensor)
 <LI><a href="#[47]">Vector&lang;IButtonListener*&rang;::~Vector()</a> from buttonsmanager.o(t._ZN6VectorIP15IButtonListenerED1Ev) referenced from buttonsmanager.o(.text)
 <LI><a href="#[73]">Sprinkler::TimeNotification()</a> from sprinkler.o(.text) referenced from sprinkler.o(.constdata__ZTV9Sprinkler)
 <LI><a href="#[72]">Sprinkler::~Sprinkler__deallocating()</a> from sprinkler.o(.text) referenced from sprinkler.o(.constdata__ZTV9Sprinkler)
 <LI><a href="#[71]">Sprinkler::~Sprinkler()</a> from sprinkler.o(.text) referenced from sprinkler.o(.constdata__ZTV9Sprinkler)
 <LI><a href="#[6e]">thunk{-4} to LedButtonListener::TimeNotification()</a> from main.o(i._ZThn4_N17LedButtonListener16TimeNotificationEv) referenced from main.o(.constdata__ZTV17LedButtonListener)
 <LI><a href="#[59]">operator delete[] (void*)</a> from array_del.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI><a href="#[6b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from main.o(.constdata__ZTV13ITimeListener)
 <LI><a href="#[6b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from main.o(.constdata__ZTV15IButtonListener)
 <LI><a href="#[6b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from sensor.o(.constdata__ZTV6Sensor)
 <LI><a href="#[76]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[75]">__sti___15_TimeManager_cpp</a> from timemanager.o(.text) referenced from timemanager.o(.init_array)
 <LI><a href="#[74]">__sti___18_ButtonsManager_cpp</a> from buttonsmanager.o(.text) referenced from buttonsmanager.o(.init_array)
 <LI><a href="#[56]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[52]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[51]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[54]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[50]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4f]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[4e]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[53]">fputc</a> from fputc_redirect.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[55]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[76]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[182]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[183]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[184]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[7c]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[11e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[80]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[185]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[91]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[186]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[82]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[187]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[84]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[188]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[86]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[189]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[88]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[18b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[89]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[18d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[190]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[191]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[192]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[193]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[194]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[195]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[196]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[197]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[198]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[199]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[8c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[19a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[19b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[19c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[19d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[19e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[19f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[79]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[90]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1a1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[92]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Sprinkler::Sprinkler() &rArr; Sprinkler::load_config() &rArr; Sprinkler::load_sensors_config() &rArr; JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::token_to_double(const char*, JSON::jsmntok_t*, double&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[151]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[95]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1a3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[97]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[104]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MockSensor::read_sensor(double&)
</UL>

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[45]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[1a5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>LedsManager::LedsManager()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ledsmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a6]"></a>LedsManager::LedsManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ledsmanager.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>LedsManager::~LedsManager()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ledsmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::~LedsManager__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledsmanager.o(.constdata__ZTV11LedsManager)
</UL>
<P><STRONG><a name="[1a7]"></a>LedsManager::~LedsManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ledsmanager.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>LedsManager::~LedsManager__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ledsmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LedsManager::~LedsManager__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::~LedsManager()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledsmanager.o(.constdata__ZTV11LedsManager)
</UL>
<P><STRONG><a name="[9c]"></a>LedsManager::SetLed(unsigned, bool)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ledsmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LedsManager::SetLed(unsigned, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::GetMask(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedButtonListener::TimeNotification()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedButtonListener::OnButtonPressed(unsigned)
</UL>

<P><STRONG><a name="[9e]"></a>LedsManager::ToggleLed(unsigned)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ledsmanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::GetMask(unsigned)
</UL>

<P><STRONG><a name="[9f]"></a>LedsManager::GetLed(unsigned)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ledsmanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::GetMask(unsigned)
</UL>

<P><STRONG><a name="[a0]"></a>ButtonsManager::NotifyListeners(unsigned)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, buttonsmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ButtonsManager::NotifyListeners(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;IButtonListener*&rang;::operator [](unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buttonsmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; ButtonsManager::NotifyListeners(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsManager::NotifyListeners(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buttonsmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; ButtonsManager::NotifyListeners(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsManager::NotifyListeners(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>ButtonsManager::ButtonsManager()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, buttonsmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ButtonsManager::ButtonsManager()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>ButtonsManager::ButtonsManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, buttonsmanager.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>ButtonsManager::~ButtonsManager()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, buttonsmanager.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>ButtonsManager::~ButtonsManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, buttonsmanager.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>ButtonsManager::ButtonPressed(unsigned)</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, buttonsmanager.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>ButtonsManager::AddButtonListener(IButtonListener*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, buttonsmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ButtonsManager::AddButtonListener(IButtonListener*) &rArr; Vector&lang;IButtonListener*&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;IButtonListener*&rang;::ResizeBuffer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 120 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = main &rArr; Sprinkler::Sprinkler() &rArr; Sprinkler::load_config() &rArr; Sprinkler::load_sensors_config() &rArr; JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::token_to_double(const char*, JSON::jsmntok_t*, double&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::Sprinkler()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedButtonListener::LedButtonListener(LedsManager*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsManager::AddButtonListener(IButtonListener*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsManager::ButtonsManager()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::LedsManager()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ab]"></a>JSON::find_json_array_token(Vector&lang;JSON::jsmntok_t&rang;&, const char*, const char*)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = JSON::find_json_array_token(Vector&lang;JSON::jsmntok_t&rang;&, const char*, const char*) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::operator [](unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[af]"></a>JSON::token_to_int(const char*, JSON::jsmntok_t*, int&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = JSON::token_to_int(const char*, JSON::jsmntok_t*, int&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
</UL>

<P><STRONG><a name="[b1]"></a>JSON::token_to_uint(const char*, JSON::jsmntok_t*, unsigned&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = JSON::token_to_uint(const char*, JSON::jsmntok_t*, unsigned&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
</UL>

<P><STRONG><a name="[b2]"></a>JSON::token_to_double(const char*, JSON::jsmntok_t*, double&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = JSON::token_to_double(const char*, JSON::jsmntok_t*, double&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[b3]"></a>JSON::token_to_alarm_type(const char*, JSON::jsmntok_t*, Alarm::AlarmType&)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = JSON::token_to_alarm_type(const char*, JSON::jsmntok_t*, Alarm::AlarmType&) &rArr; strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[b5]"></a>JSON::parse_sprinkler_configuration(const char*, Sprinkler&)</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = JSON::parse_sprinkler_configuration(const char*, Sprinkler&) &rArr; JSON::token_to_uint(const char*, JSON::jsmntok_t*, unsigned&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::~Parser()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parser()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parse(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::operator [](unsigned)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::~Vector()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::Vector()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_uint(const char*, JSON::jsmntok_t*, unsigned&)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_int(const char*, JSON::jsmntok_t*, int&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sprinkler_config()
</UL>

<P><STRONG><a name="[bb]"></a>JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)</STRONG> (Thumb, 1002 bytes, Stack size 112 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::token_to_double(const char*, JSON::jsmntok_t*, double&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm::Alarm(double, Alarm::AlarmType)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::operator [](unsigned)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::operator [](unsigned)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::operator -&rang;()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::operator =(const SmartPointer&lang;Sensor&rang;&)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::~SmartPointer()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::SmartPointer(const SmartPointer&lang;Sensor&rang;&)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::operator =(const SmartPointer&lang;Alarm&rang;&)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::~SmartPointer()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::RC::RC()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::RC::AddRef()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_alarm_type(const char*, JSON::jsmntok_t*, Alarm::AlarmType&)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_double(const char*, JSON::jsmntok_t*, double&)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_int(const char*, JSON::jsmntok_t*, int&)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::find_json_array_token(Vector&lang;JSON::jsmntok_t&rang;&, const char*, const char*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie_nodtor
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[c9]"></a>JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)</STRONG> (Thumb, 434 bytes, Stack size 80 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::token_to_int(const char*, JSON::jsmntok_t*, int&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorFactory::CreateSensor(SensorType)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::operator [](unsigned)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::operator -&rang;()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::operator =(const SmartPointer&lang;Sensor&rang;&)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::~SmartPointer()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::RC::RC()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::RC::AddRef()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_int(const char*, JSON::jsmntok_t*, int&)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::find_json_array_token(Vector&lang;JSON::jsmntok_t&rang;&, const char*, const char*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[ce]"></a>JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::token_to_double(const char*, JSON::jsmntok_t*, double&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::~Parser()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parser()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parse(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::~Vector()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::Vector()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sensors_config()
</UL>

<P><STRONG><a name="[cf]"></a>JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)</STRONG> (Thumb, 694 bytes, Stack size 96 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&) &rArr; JSON::token_to_int(const char*, JSON::jsmntok_t*, int&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::Valf(int, int)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::~Parser()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parser()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parse(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::operator [](unsigned)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::~Vector()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::Vector()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Valf&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::operator =(const SmartPointer&lang;Valf&rang;&)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::~SmartPointer()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::RC::RC()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::RC::AddRef()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_int(const char*, JSON::jsmntok_t*, int&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_valves_config()
</UL>

<P><STRONG><a name="[d5]"></a>JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)</STRONG> (Thumb, 584 bytes, Stack size 104 bytes, json.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&) &rArr; JSON::token_to_int(const char*, JSON::jsmntok_t*, int&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::~Parser()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parser()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parse(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Irrigation::operator =(const Irrigation&)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Irrigation::~Irrigation()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Irrigation::Irrigation()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::operator [](unsigned)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::~Vector()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::Vector()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Irrigation&rang;::ResizeBuffer(unsigned)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_int(const char*, JSON::jsmntok_t*, int&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_irrigations_instructions()
</UL>

<P><STRONG><a name="[b7]"></a>JSON::Parser::Parser()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jsonparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
</UL>

<P><STRONG><a name="[1ac]"></a>JSON::Parser::Parser__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, jsonparser.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>JSON::Parser::~Parser()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jsonparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
</UL>

<P><STRONG><a name="[1ad]"></a>JSON::Parser::~Parser__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, jsonparser.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>JSON::Parser::fill_token(JSON::jsmntok_t*, JSON::jsmntype_t, int, int)</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, jsonparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = JSON::Parser::fill_token(JSON::jsmntok_t*, JSON::jsmntype_t, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::parse_string(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::parse_primitive(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
</UL>

<P><STRONG><a name="[d8]"></a>JSON::Parser::alloc_token(Vector&lang;JSON::jsmntok_t&rang;&)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, jsonparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = JSON::Parser::alloc_token(Vector&lang;JSON::jsmntok_t&rang;&) &rArr; Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::operator [](unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::parse_string(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::parse_primitive(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parse(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
</UL>

<P><STRONG><a name="[da]"></a>JSON::Parser::parse_primitive(const char*, Vector&lang;JSON::jsmntok_t&rang;&)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, jsonparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = JSON::Parser::parse_primitive(const char*, Vector&lang;JSON::jsmntok_t&rang;&) &rArr; JSON::Parser::alloc_token(Vector&lang;JSON::jsmntok_t&rang;&) &rArr; Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::alloc_token(Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::fill_token(JSON::jsmntok_t*, JSON::jsmntype_t, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parse(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
</UL>

<P><STRONG><a name="[dc]"></a>JSON::Parser::parse_string(const char*, Vector&lang;JSON::jsmntok_t&rang;&)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, jsonparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = JSON::Parser::parse_string(const char*, Vector&lang;JSON::jsmntok_t&rang;&) &rArr; JSON::Parser::alloc_token(Vector&lang;JSON::jsmntok_t&rang;&) &rArr; Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::alloc_token(Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::fill_token(JSON::jsmntok_t*, JSON::jsmntype_t, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parse(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
</UL>

<P><STRONG><a name="[b8]"></a>JSON::Parser::Parse(const char*, Vector&lang;JSON::jsmntok_t&rang;&)</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, jsonparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = JSON::Parser::Parse(const char*, Vector&lang;JSON::jsmntok_t&rang;&) &rArr; JSON::Parser::parse_string(const char*, Vector&lang;JSON::jsmntok_t&rang;&) &rArr; JSON::Parser::alloc_token(Vector&lang;JSON::jsmntok_t&rang;&) &rArr; Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::parse_string(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::parse_primitive(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::alloc_token(Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::operator [](unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
</UL>

<P><STRONG><a name="[ec]"></a>Sprinkler::get_next_task_time()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sprinkler::get_next_task_time()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::TimeNotification()
</UL>

<P><STRONG><a name="[dd]"></a>Sprinkler::load_irrigations_instructions()</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = Sprinkler::load_irrigations_instructions() &rArr; JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&) &rArr; JSON::token_to_int(const char*, JSON::jsmntok_t*, int&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::GetSystemTime()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::GetWebPage(const char*, StringBuffer&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::~StringBuffer()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::StringBuffer()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::GetBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_config()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::do_tasks()
</UL>

<P><STRONG><a name="[e3]"></a>Sprinkler::needs_to_load_irrigations()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sprinkler::needs_to_load_irrigations()
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::GetSystemTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::needs_to_do_tasks()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::do_tasks()
</UL>

<P><STRONG><a name="[e4]"></a>Sprinkler::report_reading()</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = Sprinkler::report_reading() &rArr; Sensor::ReportReadings() &rArr; Sensor::ReportReadingData(const char*, ReadingData&) &rArr; StringBuffer::Write(const char*, unsigned) &rArr; Logger::AddLine(const char*, Logger::LoggerLevel) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::operator [](unsigned)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::GetSystemTime()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadings()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::do_tasks()
</UL>

<P><STRONG><a name="[e6]"></a>Sprinkler::needs_to_report_reading()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sprinkler::needs_to_report_reading()
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::GetSystemTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::needs_to_do_tasks()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::do_tasks()
</UL>

<P><STRONG><a name="[e7]"></a>Sprinkler::read_sensors()</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Sprinkler::read_sensors() &rArr; Sensor::read_sensor(double&, bool&) &rArr; Sensor::add_reading_if_needed(bool) &rArr; Vector&lang;ReadingData&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::operator [](unsigned)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read_sensor(double&, bool&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::do_tasks()
</UL>

<P><STRONG><a name="[e9]"></a>Sprinkler::do_tasks()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = Sprinkler::do_tasks() &rArr; Sprinkler::load_irrigations_instructions() &rArr; JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&) &rArr; JSON::token_to_int(const char*, JSON::jsmntok_t*, int&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::do_instructions(Vector&lang;SmartPointer&lang;Valf&rang;&rang;&, Vector&lang;Irrigation&rang;&)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::read_sensors()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::needs_to_report_reading()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::report_reading()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::needs_to_load_irrigations()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_irrigations_instructions()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::TimeNotification()
</UL>

<P><STRONG><a name="[eb]"></a>Sprinkler::needs_to_do_tasks()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sprinkler::needs_to_do_tasks() &rArr; Sprinkler::needs_to_report_reading()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::needs_to_report_reading()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::needs_to_load_irrigations()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::TimeNotification()
</UL>

<P><STRONG><a name="[73]"></a>Sprinkler::TimeNotification()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = Sprinkler::TimeNotification() &rArr; Sprinkler::do_tasks() &rArr; Sprinkler::load_irrigations_instructions() &rArr; JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&) &rArr; JSON::token_to_int(const char*, JSON::jsmntok_t*, int&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::NotifyAt(ITimeListener*, int)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::GetSystemTime()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::needs_to_do_tasks()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::do_tasks()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::get_next_task_time()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::Sprinkler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprinkler.o(.constdata__ZTV9Sprinkler)
</UL>
<P><STRONG><a name="[ee]"></a>Sprinkler::load_valves_config()</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = Sprinkler::load_valves_config() &rArr; JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&) &rArr; JSON::token_to_int(const char*, JSON::jsmntok_t*, int&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::GetWebPage(const char*, StringBuffer&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::~StringBuffer()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::StringBuffer()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::GetBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_config()
</UL>

<P><STRONG><a name="[ef]"></a>Sprinkler::load_sensors_config()</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = Sprinkler::load_sensors_config() &rArr; JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::token_to_double(const char*, JSON::jsmntok_t*, double&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::GetWebPage(const char*, StringBuffer&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::~StringBuffer()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::StringBuffer()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::GetBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_config()
</UL>

<P><STRONG><a name="[f0]"></a>Sprinkler::load_sprinkler_config()</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = Sprinkler::load_sprinkler_config() &rArr; JSON::parse_sprinkler_configuration(const char*, Sprinkler&) &rArr; JSON::token_to_uint(const char*, JSON::jsmntok_t*, unsigned&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::GetWebPage(const char*, StringBuffer&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::~StringBuffer()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::StringBuffer()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::GetBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_config()
</UL>

<P><STRONG><a name="[f1]"></a>Sprinkler::load_config()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = Sprinkler::load_config() &rArr; Sprinkler::load_sensors_config() &rArr; JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::token_to_double(const char*, JSON::jsmntok_t*, double&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sprinkler_config()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sensors_config()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_valves_config()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_irrigations_instructions()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::Sprinkler()
</UL>

<P><STRONG><a name="[a8]"></a>Sprinkler::Sprinkler()</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Sprinkler::Sprinkler() &rArr; Sprinkler::load_config() &rArr; Sprinkler::load_sensors_config() &rArr; JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&) &rArr; JSON::token_to_double(const char*, JSON::jsmntok_t*, double&) &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Valf&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Irrigation&rang;::ResizeBuffer(unsigned)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_config()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::TimeNotification()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>Sprinkler::Sprinkler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, sprinkler.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>Sprinkler::~Sprinkler()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sprinkler::~Sprinkler() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::~Sprinkler__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprinkler.o(.constdata__ZTV9Sprinkler)
</UL>
<P><STRONG><a name="[1af]"></a>Sprinkler::~Sprinkler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, sprinkler.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>Sprinkler::~Sprinkler__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sprinkler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Sprinkler::~Sprinkler__deallocating() &rArr; Sprinkler::~Sprinkler() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::~Sprinkler()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprinkler.o(.constdata__ZTV9Sprinkler)
</UL>
<P><STRONG><a name="[a7]"></a>Logger::AddLine(const char*, Logger::LoggerLevel)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, logger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Logger::AddLine(const char*, Logger::LoggerLevel) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::set_state(bool)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::Write(const char*, unsigned)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::do_instructions(Vector&lang;SmartPointer&lang;Valf&rang;&rang;&, Vector&lang;Irrigation&rang;&)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::report_reading()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_irrigations_instructions()
</UL>

<P><STRONG><a name="[53]"></a>fputc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fputc_redirect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>Irrigation::Irrigation()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, irrigation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json.o(t._ZN6VectorI10IrrigationE12ResizeBufferEj)
</UL>
<P><STRONG><a name="[1b0]"></a>Irrigation::Irrigation__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, irrigation.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>Irrigation::~Irrigation()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irrigation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sprinkler.o(.text)
<LI> json.o(t._ZN6VectorI10IrrigationE12ResizeBufferEj)
</UL>
<P><STRONG><a name="[1b1]"></a>Irrigation::~Irrigation__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, irrigation.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>Irrigation::operator =(const Irrigation&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, irrigation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Irrigation&rang;::ResizeBuffer(unsigned)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
</UL>

<P><STRONG><a name="[c3]"></a>Alarm::Alarm(double, Alarm::AlarmType)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alarm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[1b2]"></a>Alarm::Alarm__sub_object(double, Alarm::AlarmType)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, alarm.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>Alarm::~Alarm()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, alarm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::Release()
</UL>

<P><STRONG><a name="[1b3]"></a>Alarm::~Alarm__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, alarm.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>Alarm::will_alarm(double)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Alarm::will_alarm(double) &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read_sensor(double&, bool&)
</UL>

<P><STRONG><a name="[f6]"></a>Sensor::Sensor__sub_object()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Sensor::Sensor__sub_object() &rArr; Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned) &rArr; __aeabi_vec_new_cookie_nodtor &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;ReadingData&rang;::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySensor::BatterySensor()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterSensor::WaterSensor()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MockSensor::MockSensor()
</UL>

<P><STRONG><a name="[1b4]"></a>Sensor::~Sensor()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, sensor.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>Sensor::~Sensor__sub_object()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sensor::~Sensor__sub_object() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySensor::~BatterySensor()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MockSensor::~MockSensor()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterSensor::~WaterSensor()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::~Sensor__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata__ZTV6Sensor)
</UL>
<P><STRONG><a name="[70]"></a>Sensor::~Sensor__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Sensor::~Sensor__deallocating() &rArr; Sensor::~Sensor__sub_object() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::~Sensor__sub_object()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata__ZTV6Sensor)
</UL>
<P><STRONG><a name="[f8]"></a>Sensor::add_reading_if_needed(bool)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Sensor::add_reading_if_needed(bool) &rArr; Vector&lang;ReadingData&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;ReadingData&rang;::ResizeBuffer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read_sensor(double&, bool&)
</UL>

<P><STRONG><a name="[e8]"></a>Sensor::read_sensor(double&, bool&)</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Sensor::read_sensor(double&, bool&) &rArr; Sensor::add_reading_if_needed(bool) &rArr; Vector&lang;ReadingData&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::GetSystemTime()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::add_reading_if_needed(bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm::will_alarm(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::read_sensors()
</UL>

<P><STRONG><a name="[fa]"></a>Sensor::ReportReadingData(const char*, ReadingData&)</STRONG> (Thumb, 148 bytes, Stack size 192 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Sensor::ReportReadingData(const char*, ReadingData&) &rArr; StringBuffer::Write(const char*, unsigned) &rArr; Logger::AddLine(const char*, Logger::LoggerLevel) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication::PostWebPage(const char*, StringBuffer&, StringBuffer&)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::Write(const char*, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::~StringBuffer()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::StringBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadings()
</UL>

<P><STRONG><a name="[e5]"></a>Sensor::ReportReadings()</STRONG> (Thumb, 90 bytes, Stack size 160 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = Sensor::ReportReadings() &rArr; Sensor::ReportReadingData(const char*, ReadingData&) &rArr; StringBuffer::Write(const char*, unsigned) &rArr; Logger::AddLine(const char*, Logger::LoggerLevel) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;ReadingData&rang;::Clear()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadingData(const char*, ReadingData&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::report_reading()
</UL>

<P><STRONG><a name="[ca]"></a>SensorFactory::CreateSensor(SensorType)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sensorfactory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = SensorFactory::CreateSensor(SensorType) &rArr; BatterySensor::BatterySensor() &rArr; Sensor::Sensor__sub_object() &rArr; Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned) &rArr; __aeabi_vec_new_cookie_nodtor &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySensor::BatterySensor()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterSensor::WaterSensor()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MockSensor::MockSensor()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[102]"></a>WaterSensor::WaterSensor()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, watersensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = WaterSensor::WaterSensor() &rArr; Sensor::Sensor__sub_object() &rArr; Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned) &rArr; __aeabi_vec_new_cookie_nodtor &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::Sensor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorFactory::CreateSensor(SensorType)
</UL>

<P><STRONG><a name="[1b5]"></a>WaterSensor::WaterSensor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, watersensor.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>WaterSensor::~WaterSensor()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, watersensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WaterSensor::~WaterSensor() &rArr; Sensor::~Sensor__sub_object() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::~Sensor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterSensor::~WaterSensor__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watersensor.o(.constdata__ZTV11WaterSensor)
</UL>
<P><STRONG><a name="[1b6]"></a>WaterSensor::~WaterSensor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, watersensor.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>WaterSensor::~WaterSensor__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, watersensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WaterSensor::~WaterSensor__deallocating() &rArr; WaterSensor::~WaterSensor() &rArr; Sensor::~Sensor__sub_object() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterSensor::~WaterSensor()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watersensor.o(.constdata__ZTV11WaterSensor)
</UL>
<P><STRONG><a name="[65]"></a>WaterSensor::get_type()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, watersensor.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> watersensor.o(.constdata__ZTV11WaterSensor)
</UL>
<P><STRONG><a name="[66]"></a>WaterSensor::read_sensor(double&)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, watersensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WaterSensor::read_sensor(double&) &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watersensor.o(.constdata__ZTV11WaterSensor)
</UL>
<P><STRONG><a name="[100]"></a>MockSensor::MockSensor()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mocksensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MockSensor::MockSensor() &rArr; Sensor::Sensor__sub_object() &rArr; Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned) &rArr; __aeabi_vec_new_cookie_nodtor &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::Sensor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorFactory::CreateSensor(SensorType)
</UL>

<P><STRONG><a name="[1b7]"></a>MockSensor::MockSensor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mocksensor.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>MockSensor::~MockSensor()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mocksensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MockSensor::~MockSensor() &rArr; Sensor::~Sensor__sub_object() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::~Sensor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MockSensor::~MockSensor__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mocksensor.o(.constdata__ZTV10MockSensor)
</UL>
<P><STRONG><a name="[1b8]"></a>MockSensor::~MockSensor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mocksensor.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>MockSensor::~MockSensor__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mocksensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MockSensor::~MockSensor__deallocating() &rArr; MockSensor::~MockSensor() &rArr; Sensor::~Sensor__sub_object() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MockSensor::~MockSensor()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mocksensor.o(.constdata__ZTV10MockSensor)
</UL>
<P><STRONG><a name="[5f]"></a>MockSensor::get_type()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mocksensor.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mocksensor.o(.constdata__ZTV10MockSensor)
</UL>
<P><STRONG><a name="[60]"></a>MockSensor::read_sensor(double&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mocksensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MockSensor::read_sensor(double&)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mocksensor.o(.constdata__ZTV10MockSensor)
</UL>
<P><STRONG><a name="[101]"></a>BatterySensor::BatterySensor()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, batterysensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = BatterySensor::BatterySensor() &rArr; Sensor::Sensor__sub_object() &rArr; Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned) &rArr; __aeabi_vec_new_cookie_nodtor &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::Sensor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorFactory::CreateSensor(SensorType)
</UL>

<P><STRONG><a name="[1b9]"></a>BatterySensor::BatterySensor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, batterysensor.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>BatterySensor::~BatterySensor()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, batterysensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BatterySensor::~BatterySensor() &rArr; Sensor::~Sensor__sub_object() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::~Sensor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySensor::~BatterySensor__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> batterysensor.o(.constdata__ZTV13BatterySensor)
</UL>
<P><STRONG><a name="[1ba]"></a>BatterySensor::~BatterySensor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, batterysensor.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>BatterySensor::~BatterySensor__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, batterysensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BatterySensor::~BatterySensor__deallocating() &rArr; BatterySensor::~BatterySensor() &rArr; Sensor::~Sensor__sub_object() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySensor::~BatterySensor()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> batterysensor.o(.constdata__ZTV13BatterySensor)
</UL>
<P><STRONG><a name="[69]"></a>BatterySensor::get_type()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, batterysensor.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> batterysensor.o(.constdata__ZTV13BatterySensor)
</UL>
<P><STRONG><a name="[6a]"></a>BatterySensor::read_sensor(double&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, batterysensor.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> batterysensor.o(.constdata__ZTV13BatterySensor)
</UL>
<P><STRONG><a name="[106]"></a>Valf::set_state(bool)</STRONG> (Thumb, 48 bytes, Stack size 80 bytes, valf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Valf::set_state(bool) &rArr; Logger::AddLine(const char*, Logger::LoggerLevel) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::Valf(int, int)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::do_instructions(Vector&lang;SmartPointer&lang;Valf&rang;&rang;&, Vector&lang;Irrigation&rang;&)
</UL>

<P><STRONG><a name="[d0]"></a>Valf::Valf(int, int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, valf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Valf::Valf(int, int) &rArr; Valf::set_state(bool) &rArr; Logger::AddLine(const char*, Logger::LoggerLevel) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::set_state(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
</UL>

<P><STRONG><a name="[1bb]"></a>Valf::Valf__sub_object(int, int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, valf.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>Valf::~Valf()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, valf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::Release()
</UL>

<P><STRONG><a name="[1bc]"></a>Valf::~Valf__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, valf.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>Valf::get_state(bool&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, valf.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>Valf::do_instructions(Vector&lang;SmartPointer&lang;Valf&rang;&rang;&, Vector&lang;Irrigation&rang;&)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, valf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Valf::do_instructions(Vector&lang;SmartPointer&lang;Valf&rang;&rang;&, Vector&lang;Irrigation&rang;&) &rArr; Valf::set_state(bool) &rArr; Logger::AddLine(const char*, Logger::LoggerLevel) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::GetSystemTime()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::set_state(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::do_tasks()
</UL>

<P><STRONG><a name="[de]"></a>StringBuffer::StringBuffer()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StringBuffer::StringBuffer() &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadingData(const char*, ReadingData&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sprinkler_config()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sensors_config()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_valves_config()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_irrigations_instructions()
</UL>

<P><STRONG><a name="[1be]"></a>StringBuffer::StringBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stringbuffer.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>StringBuffer::~StringBuffer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StringBuffer::~StringBuffer() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadingData(const char*, ReadingData&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sprinkler_config()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sensors_config()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_valves_config()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_irrigations_instructions()
</UL>

<P><STRONG><a name="[1bf]"></a>StringBuffer::~StringBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stringbuffer.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>StringBuffer::ReallocateBuffer(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StringBuffer::ReallocateBuffer(unsigned) &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::Write(const char*, unsigned)
</UL>

<P><STRONG><a name="[fc]"></a>StringBuffer::Write(const char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = StringBuffer::Write(const char*, unsigned) &rArr; Logger::AddLine(const char*, Logger::LoggerLevel) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::ReallocateBuffer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadingData(const char*, ReadingData&)
</UL>

<P><STRONG><a name="[10c]"></a>StringBuffer::Read(char*, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10d]"></a>TimeListenersList::TimeListenersList()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timelistenerslist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TimeListenersList::TimeListenersList() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenerData::TimeListenerData(int, ITimeListener*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_TimeManager_cpp
</UL>

<P><STRONG><a name="[1c0]"></a>TimeListenersList::TimeListenersList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, timelistenerslist.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>TimeListenersList::Clear()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timelistenerslist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimeListenersList::Clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::~TimeListenersList()
</UL>

<P><STRONG><a name="[4d]"></a>TimeListenersList::~TimeListenersList()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timelistenerslist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimeListenersList::~TimeListenersList() &rArr; TimeListenersList::Clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::Clear()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timemanager.o(.text)
</UL>
<P><STRONG><a name="[1c1]"></a>TimeListenersList::~TimeListenersList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, timelistenerslist.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>TimeListenersList::Add(int, ITimeListener*)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, timelistenerslist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TimeListenersList::Add(int, ITimeListener*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenerData::TimeListenerData(int, ITimeListener*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::NotifyAt(ITimeListener*, int)
</UL>

<P><STRONG><a name="[111]"></a>TimeListenersList::Remove(int, ITimeListener*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timelistenerslist.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[114]"></a>TimeListenersList::GetFirst()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timelistenerslist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::NotifyListeners()
</UL>

<P><STRONG><a name="[112]"></a>TimeListenersList::RemoveFirst()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timelistenerslist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimeListenersList::RemoveFirst() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::NotifyListeners()
</UL>

<P><STRONG><a name="[113]"></a>TimeManager::NotifyListeners()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timemanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TimeManager::NotifyListeners() &rArr; TimeListenersList::RemoveFirst() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::RemoveFirst()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::GetFirst()
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timemanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; TimeManager::NotifyListeners() &rArr; TimeListenersList::RemoveFirst() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::NotifyListeners()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>TimeManager::GetTimeManager()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timemanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedButtonListener::OnButtonPressed(unsigned)
</UL>

<P><STRONG><a name="[1c2]"></a>TimeManager::~TimeManager()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timemanager.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>TimeManager::~TimeManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, timemanager.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>TimeManager::SetSystemTime(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timemanager.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>TimeManager::GetSystemTime()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timemanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedButtonListener::OnButtonPressed(unsigned)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::read_sensor(double&, bool&)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::do_instructions(Vector&lang;SmartPointer&lang;Valf&rang;&rang;&, Vector&lang;Irrigation&rang;&)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::TimeNotification()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::needs_to_report_reading()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::report_reading()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::needs_to_load_irrigations()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_irrigations_instructions()
</UL>

<P><STRONG><a name="[ed]"></a>TimeManager::NotifyAt(ITimeListener*, int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timemanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TimeManager::NotifyAt(ITimeListener*, int) &rArr; TimeListenersList::Add(int, ITimeListener*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::Add(int, ITimeListener*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedButtonListener::OnButtonPressed(unsigned)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::TimeNotification()
</UL>

<P><STRONG><a name="[115]"></a>TimeManager::TimeManager()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, timemanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimeManager::TimeManager()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_TimeManager_cpp
</UL>

<P><STRONG><a name="[1c5]"></a>TimeManager::TimeManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, timemanager.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>Communication::GetWebPage(const char*, StringBuffer&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, communication.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sprinkler_config()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sensors_config()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_valves_config()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_irrigations_instructions()
</UL>

<P><STRONG><a name="[fd]"></a>Communication::PostWebPage(const char*, StringBuffer&, StringBuffer&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, communication.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadingData(const char*, ReadingData&)
</UL>

<P><STRONG><a name="[107]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::StringBuffer()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[108]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::~StringBuffer()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[10a]"></a>realloc</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, h1_realloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::ReallocateBuffer(unsigned)
</UL>

<P><STRONG><a name="[f2]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logger::AddLine(const char*, Logger::LoggerLevel)
</UL>

<P><STRONG><a name="[ff]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::set_state(bool)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadings()
</UL>

<P><STRONG><a name="[fb]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadingData(const char*, ReadingData&)
</UL>

<P><STRONG><a name="[135]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[7f]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[11c]"></a>__printf</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, __printf_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b0]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_double(const char*, JSON::jsmntok_t*, double&)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_uint(const char*, JSON::jsmntok_t*, unsigned&)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_int(const char*, JSON::jsmntok_t*, int&)
</UL>

<P><STRONG><a name="[120]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[122]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[85]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[b4]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::token_to_alarm_type(const char*, JSON::jsmntok_t*, Alarm::AlarmType&)
</UL>

<P><STRONG><a name="[ae]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::find_json_array_token(Vector&lang;JSON::jsmntok_t&rang;&, const char*, const char*)
</UL>

<P><STRONG><a name="[ad]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::find_json_array_token(Vector&lang;JSON::jsmntok_t&rang;&, const char*, const char*)
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::Read(char*, unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBuffer::Write(const char*, unsigned)
</UL>

<P><STRONG><a name="[124]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1c6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadingData(const char*, ReadingData&)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1c7]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_vec_delete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aeabi_vec_delete_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Valf&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Irrigation&rang;::ResizeBuffer(unsigned)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::~Sensor__sub_object()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::~Sprinkler()
</UL>

<P><STRONG><a name="[116]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[15f]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[163]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[1c8]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[127]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[83]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[129]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[11b]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1ca]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[11a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[136]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[81]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[119]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[121]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[13c]"></a>_scanf_really_real</STRONG> (Thumb, 672 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[11f]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[50]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[1ce]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1cf]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[87]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1d0]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[130]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[140]"></a>__vfscanf</STRONG> (Thumb, 876 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[12c]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[137]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[143]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[128]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[142]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>

<P><STRONG><a name="[144]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[98]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1d2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[14c]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[14d]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[14e]"></a>_scanf_really_hex_real</STRONG> (Thumb, 776 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[181]"></a>_scanf_really_infnan</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[94]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[149]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
</UL>

<P><STRONG><a name="[147]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[146]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[161]"></a>__ARM_vec_cleanup</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ARM_vec_cleanup_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[148]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[162]"></a>__cxa_rethrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_rethrow_noexceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[153]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[154]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1d5]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[155]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1d6]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[12d]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[158]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[157]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[15b]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[159]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[15a]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[12e]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13b]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[12f]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13a]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[15c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[9d]"></a>LedsManager::GetMask(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ledsmanager.o(i._ZN11LedsManager7GetMaskEj))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::GetLed(unsigned)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::ToggleLed(unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::SetLed(unsigned, bool)
</UL>

<P><STRONG><a name="[10e]"></a>TimeListenerData::TimeListenerData(int, ITimeListener*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timelistenerslist.o(i._ZN16TimeListenerDataC1EiP13ITimeListener))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::Add(int, ITimeListener*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::TimeListenersList()
</UL>

<P><STRONG><a name="[1d8]"></a>TimeListenerData::TimeListenerData__sub_object(int, ITimeListener*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, timelistenerslist.o(i._ZN16TimeListenerDataC1EiP13ITimeListener), UNUSED)

<P><STRONG><a name="[6c]"></a>LedButtonListener::OnButtonPressed(unsigned)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(i._ZN17LedButtonListener15OnButtonPressedEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LedButtonListener::OnButtonPressed(unsigned) &rArr; TimeManager::NotifyAt(ITimeListener*, int) &rArr; TimeListenersList::Add(int, ITimeListener*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::NotifyAt(ITimeListener*, int)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::GetTimeManager()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::GetSystemTime()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::SetLed(unsigned, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV17LedButtonListener)
</UL>
<P><STRONG><a name="[6d]"></a>LedButtonListener::TimeNotification()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i._ZN17LedButtonListener16TimeNotificationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedButtonListener::TimeNotification() &rArr; LedsManager::SetLed(unsigned, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::SetLed(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to LedButtonListener::TimeNotification()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV17LedButtonListener)
</UL>
<P><STRONG><a name="[aa]"></a>LedButtonListener::LedButtonListener(LedsManager*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i._ZN17LedButtonListenerC1EP11LedsManagerj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedButtonListener::LedButtonListener(LedsManager*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d9]"></a>LedButtonListener::LedButtonListener__sub_object(LedsManager*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN17LedButtonListenerC1EP11LedsManagerj), UNUSED)

<P><STRONG><a name="[e0]"></a>StringBuffer::GetBuffer() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sprinkler.o(i._ZNK12StringBuffer9GetBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sprinkler_config()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_sensors_config()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_valves_config()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::load_irrigations_instructions()
</UL>

<P><STRONG><a name="[6e]"></a>thunk{-4} to LedButtonListener::TimeNotification()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._ZThn4_N17LedButtonListener16TimeNotificationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = thunk{-4} to LedButtonListener::TimeNotification() &rArr; LedButtonListener::TimeNotification() &rArr; LedsManager::SetLed(unsigned, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedButtonListener::TimeNotification()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV17LedButtonListener)
</UL>
<P><STRONG><a name="[59]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::~Vector()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;IButtonListener*&rang;::~Vector()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;IButtonListener*&rang;::ResizeBuffer(unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;ReadingData&rang;::ResizeBuffer(unsigned)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::~Sensor__sub_object()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_vec_new.o(i.__cxa_vec_new)
</UL>
<P><STRONG><a name="[9b]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::Release()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::Release()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::Release()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedsManager::~LedsManager__deallocating()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::RemoveFirst()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::Remove(int, ITimeListener*)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::~TimeListenersList()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::Clear()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySensor::~BatterySensor__deallocating()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MockSensor::~MockSensor__deallocating()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterSensor::~WaterSensor__deallocating()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::~Sensor__deallocating()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::~Sprinkler__deallocating()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[15e]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;IButtonListener*&rang;::ResizeBuffer(unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;ReadingData&rang;::ResizeBuffer(unsigned)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[c2]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorFactory::CreateSensor(SensorType)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::SmartPointer()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::SmartPointer()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::SmartPointer()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_TimeManager_cpp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::Add(int, ITimeListener*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::TimeListenersList()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[160]"></a>__ARM_array_new_general</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, array_new_general.o(i.__ARM_array_new_general))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>

<P><STRONG><a name="[132]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_ButtonsManager_cpp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_TimeManager_cpp
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_vec_dtor_cookie</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_vec_dtor_cookie.o(i.__aeabi_vec_dtor_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_vec_new_cookie_nodtor</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aeabi_vec_new_cookie_nodtor.o(i.__aeabi_vec_new_cookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_new_cookie_nodtor &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Valf&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;Irrigation&rang;::ResizeBuffer(unsigned)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[8d]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[6b]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(.constdata__ZTV15IButtonListener)
<LI> main.o(.constdata__ZTV13ITimeListener)
<LI> sensor.o(.constdata__ZTV6Sensor)
</UL>
<P><STRONG><a name="[165]"></a>__cxa_vec_new</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxa_vec_new.o(i.__cxa_vec_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie_nodtor
</UL>

<P><STRONG><a name="[166]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[13f]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[168]"></a>__mathlib_tofloat</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[150]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[11d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[169]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[16b]"></a>ldexp</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[8a]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[56]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>SmartPointer&lang;Valf&rang;::RC::AddRef()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, json.o(t._ZN12SmartPointerI4ValfE2RC6AddRefEv))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::operator =(const SmartPointer&lang;Valf&rang;&)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::SmartPointer()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
</UL>

<P><STRONG><a name="[d1]"></a>SmartPointer&lang;Valf&rang;::RC::RC()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, json.o(t._ZN12SmartPointerI4ValfE2RCC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::SmartPointer()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
</UL>

<P><STRONG><a name="[1da]"></a>SmartPointer&lang;Valf&rang;::RC::RC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, json.o(t._ZN12SmartPointerI4ValfE2RCC1Ev), UNUSED)

<P><STRONG><a name="[16c]"></a>SmartPointer&lang;Valf&rang;::Release()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI4ValfE7ReleaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmartPointer&lang;Valf&rang;::Release() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valf::~Valf()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::operator =(const SmartPointer&lang;Valf&rang;&)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::~SmartPointer()
</UL>

<P><STRONG><a name="[5b]"></a>SmartPointer&lang;Valf&rang;::SmartPointer()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI4ValfEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SmartPointer&lang;Valf&rang;::SmartPointer() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::RC::RC()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::RC::AddRef()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json.o(t._ZN6VectorI12SmartPointerI4ValfEE12ResizeBufferEj)
</UL>
<P><STRONG><a name="[1db]"></a>SmartPointer&lang;Valf&rang;::SmartPointer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI4ValfEC1Ev), UNUSED)

<P><STRONG><a name="[4b]"></a>SmartPointer&lang;Valf&rang;::~SmartPointer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, json.o(t._ZN12SmartPointerI4ValfED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SmartPointer&lang;Valf&rang;::~SmartPointer() &rArr; SmartPointer&lang;Valf&rang;::Release() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::Release()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sprinkler.o(.text)
<LI> json.o(t._ZN6VectorI12SmartPointerI4ValfEE12ResizeBufferEj)
</UL>
<P><STRONG><a name="[1dc]"></a>SmartPointer&lang;Valf&rang;::~SmartPointer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, json.o(t._ZN12SmartPointerI4ValfED1Ev), UNUSED)

<P><STRONG><a name="[d4]"></a>SmartPointer&lang;Valf&rang;::operator =(const SmartPointer&lang;Valf&rang;&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI4ValfEaSERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SmartPointer&lang;Valf&rang;::operator =(const SmartPointer&lang;Valf&rang;&) &rArr; SmartPointer&lang;Valf&rang;::Release() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::Release()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::RC::AddRef()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Valf&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
</UL>

<P><STRONG><a name="[c5]"></a>SmartPointer&lang;Alarm&rang;::RC::AddRef()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, json.o(t._ZN12SmartPointerI5AlarmE2RC6AddRefEv))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::operator =(const SmartPointer&lang;Alarm&rang;&)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::SmartPointer()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[c4]"></a>SmartPointer&lang;Alarm&rang;::RC::RC()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, json.o(t._ZN12SmartPointerI5AlarmE2RCC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::SmartPointer()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[1dd]"></a>SmartPointer&lang;Alarm&rang;::RC::RC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, json.o(t._ZN12SmartPointerI5AlarmE2RCC1Ev), UNUSED)

<P><STRONG><a name="[16e]"></a>SmartPointer&lang;Alarm&rang;::Release()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI5AlarmE7ReleaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmartPointer&lang;Alarm&rang;::Release() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm::~Alarm()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::operator =(const SmartPointer&lang;Alarm&rang;&)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::~SmartPointer()
</UL>

<P><STRONG><a name="[5c]"></a>SmartPointer&lang;Alarm&rang;::SmartPointer()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI5AlarmEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SmartPointer&lang;Alarm&rang;::SmartPointer() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::RC::RC()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::RC::AddRef()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json.o(t._ZN6VectorI12SmartPointerI5AlarmEE12ResizeBufferEj)
</UL>
<P><STRONG><a name="[1de]"></a>SmartPointer&lang;Alarm&rang;::SmartPointer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI5AlarmEC1Ev), UNUSED)

<P><STRONG><a name="[4c]"></a>SmartPointer&lang;Alarm&rang;::~SmartPointer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, json.o(t._ZN12SmartPointerI5AlarmED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SmartPointer&lang;Alarm&rang;::~SmartPointer() &rArr; SmartPointer&lang;Alarm&rang;::Release() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::Release()
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sensor.o(.text)
<LI> json.o(t._ZN6VectorI12SmartPointerI5AlarmEE12ResizeBufferEj)
</UL>
<P><STRONG><a name="[1df]"></a>SmartPointer&lang;Alarm&rang;::~SmartPointer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, json.o(t._ZN12SmartPointerI5AlarmED1Ev), UNUSED)

<P><STRONG><a name="[c7]"></a>SmartPointer&lang;Alarm&rang;::operator =(const SmartPointer&lang;Alarm&rang;&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI5AlarmEaSERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SmartPointer&lang;Alarm&rang;::operator =(const SmartPointer&lang;Alarm&rang;&) &rArr; SmartPointer&lang;Alarm&rang;::Release() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::Release()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::RC::AddRef()
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[cc]"></a>SmartPointer&lang;Sensor&rang;::RC::AddRef()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, json.o(t._ZN12SmartPointerI6SensorE2RC6AddRefEv))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::operator =(const SmartPointer&lang;Sensor&rang;&)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::SmartPointer()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::SmartPointer(const SmartPointer&lang;Sensor&rang;&)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[cb]"></a>SmartPointer&lang;Sensor&rang;::RC::RC()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, json.o(t._ZN12SmartPointerI6SensorE2RCC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::SmartPointer()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[1e0]"></a>SmartPointer&lang;Sensor&rang;::RC::RC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, json.o(t._ZN12SmartPointerI6SensorE2RCC1Ev), UNUSED)

<P><STRONG><a name="[170]"></a>SmartPointer&lang;Sensor&rang;::Release()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, json.o(t._ZN12SmartPointerI6SensorE7ReleaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SmartPointer&lang;Sensor&rang;::Release() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::operator =(const SmartPointer&lang;Sensor&rang;&)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::~SmartPointer()
</UL>

<P><STRONG><a name="[bd]"></a>SmartPointer&lang;Sensor&rang;::SmartPointer(const SmartPointer&lang;Sensor&rang;&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI6SensorEC1ERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SmartPointer&lang;Sensor&rang;::SmartPointer(const SmartPointer&lang;Sensor&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::RC::AddRef()
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[1e1]"></a>SmartPointer&lang;Sensor&rang;::SmartPointer__sub_object(const SmartPointer&lang;Sensor&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI6SensorEC1ERKS1_), UNUSED)

<P><STRONG><a name="[48]"></a>SmartPointer&lang;Sensor&rang;::SmartPointer()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI6SensorEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SmartPointer&lang;Sensor&rang;::SmartPointer() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::RC::RC()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::RC::AddRef()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> json.o(.text)
<LI> json.o(t._ZN6VectorI12SmartPointerI6SensorEE12ResizeBufferEj)
</UL>
<P><STRONG><a name="[1e2]"></a>SmartPointer&lang;Sensor&rang;::SmartPointer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI6SensorEC1Ev), UNUSED)

<P><STRONG><a name="[49]"></a>SmartPointer&lang;Sensor&rang;::~SmartPointer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, json.o(t._ZN12SmartPointerI6SensorED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmartPointer&lang;Sensor&rang;::~SmartPointer() &rArr; SmartPointer&lang;Sensor&rang;::Release() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::Release()
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sprinkler.o(.text)
<LI> json.o(.text)
<LI> json.o(t._ZN6VectorI12SmartPointerI6SensorEE12ResizeBufferEj)
</UL>
<P><STRONG><a name="[1e3]"></a>SmartPointer&lang;Sensor&rang;::~SmartPointer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, json.o(t._ZN12SmartPointerI6SensorED1Ev), UNUSED)

<P><STRONG><a name="[c0]"></a>SmartPointer&lang;Sensor&rang;::operator =(const SmartPointer&lang;Sensor&rang;&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, json.o(t._ZN12SmartPointerI6SensorEaSERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SmartPointer&lang;Sensor&rang;::operator =(const SmartPointer&lang;Sensor&rang;&) &rArr; SmartPointer&lang;Sensor&rang;::Release() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::Release()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::RC::AddRef()
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::ResizeBuffer(unsigned)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[be]"></a>SmartPointer&lang;Sensor&rang;::operator -&rang;()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, json.o(t._ZN12SmartPointerI6SensorEptEv))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
</UL>

<P><STRONG><a name="[d6]"></a>Vector&lang;Irrigation&rang;::ResizeBuffer(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, json.o(t._ZN6VectorI10IrrigationE12ResizeBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Vector&lang;Irrigation&rang;::ResizeBuffer(unsigned) &rArr; __aeabi_vec_new_cookie_nodtor &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Irrigation::operator =(const Irrigation&)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie_nodtor
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::Sprinkler()
</UL>

<P><STRONG><a name="[f9]"></a>Vector&lang;ReadingData&rang;::ResizeBuffer(unsigned)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sensor.o(t._ZN6VectorI11ReadingDataE12ResizeBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;ReadingData&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;ReadingData&rang;::Clear()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::add_reading_if_needed(bool)
</UL>

<P><STRONG><a name="[f7]"></a>Vector&lang;ReadingData&rang;::Clear()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sensor.o(t._ZN6VectorI11ReadingDataE5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Vector&lang;ReadingData&rang;::Clear() &rArr; Vector&lang;ReadingData&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;ReadingData&rang;::ResizeBuffer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::Sensor__sub_object()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::ReportReadings()
</UL>

<P><STRONG><a name="[d3]"></a>Vector&lang;SmartPointer&lang;Valf&rang;&rang;::ResizeBuffer(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, json.o(t._ZN6VectorI12SmartPointerI4ValfEE12ResizeBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Vector&lang;SmartPointer&lang;Valf&rang;&rang;::ResizeBuffer(unsigned) &rArr; __aeabi_vec_new_cookie_nodtor &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Valf&rang;::operator =(const SmartPointer&lang;Valf&rang;&)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie_nodtor
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::Sprinkler()
</UL>

<P><STRONG><a name="[c6]"></a>Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, json.o(t._ZN6VectorI12SmartPointerI5AlarmEE12ResizeBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Vector&lang;SmartPointer&lang;Alarm&rang;&rang;::ResizeBuffer(unsigned) &rArr; __aeabi_vec_new_cookie_nodtor &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Alarm&rang;::operator =(const SmartPointer&lang;Alarm&rang;&)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie_nodtor
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor::Sensor__sub_object()
</UL>

<P><STRONG><a name="[cd]"></a>Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::ResizeBuffer(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, json.o(t._ZN6VectorI12SmartPointerI6SensorEE12ResizeBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::ResizeBuffer(unsigned) &rArr; __aeabi_vec_new_cookie_nodtor &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartPointer&lang;Sensor&rang;::operator =(const SmartPointer&lang;Sensor&rang;&)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie_nodtor
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::Sprinkler()
</UL>

<P><STRONG><a name="[bc]"></a>Vector&lang;SmartPointer&lang;Sensor&rang;&rang;::operator [](unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, json.o(t._ZN6VectorI12SmartPointerI6SensorEEixEj))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::read_sensors()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sprinkler::report_reading()
</UL>

<P><STRONG><a name="[d9]"></a>Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, json.o(t._ZN6VectorIN4JSON9jsmntok_tEE12ResizeBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::alloc_token(Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::Vector()
</UL>

<P><STRONG><a name="[b6]"></a>Vector&lang;JSON::jsmntok_t&rang;::Vector()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, json.o(t._ZN6VectorIN4JSON9jsmntok_tEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Vector&lang;JSON::jsmntok_t&rang;::Vector() &rArr; Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;JSON::jsmntok_t&rang;::ResizeBuffer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
</UL>

<P><STRONG><a name="[1e4]"></a>Vector&lang;JSON::jsmntok_t&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, json.o(t._ZN6VectorIN4JSON9jsmntok_tEEC1Ev), UNUSED)

<P><STRONG><a name="[ba]"></a>Vector&lang;JSON::jsmntok_t&rang;::~Vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, json.o(t._ZN6VectorIN4JSON9jsmntok_tEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Vector&lang;JSON::jsmntok_t&rang;::~Vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors(const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
</UL>

<P><STRONG><a name="[1e5]"></a>Vector&lang;JSON::jsmntok_t&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, json.o(t._ZN6VectorIN4JSON9jsmntok_tEED1Ev), UNUSED)

<P><STRONG><a name="[ac]"></a>Vector&lang;JSON::jsmntok_t&rang;::operator [](unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, json.o(t._ZN6VectorIN4JSON9jsmntok_tEEixEj))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::alloc_token(Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::Parser::Parse(const char*, Vector&lang;JSON::jsmntok_t&rang;&)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_irrigations(const char*, Vector&lang;Irrigation&rang;&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_valves(const char*, Vector&lang;SmartPointer&lang;Valf&rang;&rang;&)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sensors_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_sprinkler_configuration(const char*, Sprinkler&)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::find_json_array_token(Vector&lang;JSON::jsmntok_t&rang;&, const char*, const char*)
</UL>

<P><STRONG><a name="[a5]"></a>Vector&lang;IButtonListener*&rang;::ResizeBuffer(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, buttonsmanager.o(t._ZN6VectorIP15IButtonListenerE12ResizeBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Vector&lang;IButtonListener*&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsManager::AddButtonListener(IButtonListener*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_ButtonsManager_cpp
</UL>

<P><STRONG><a name="[47]"></a>Vector&lang;IButtonListener*&rang;::~Vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, buttonsmanager.o(t._ZN6VectorIP15IButtonListenerED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Vector&lang;IButtonListener*&rang;::~Vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonsmanager.o(.text)
</UL>
<P><STRONG><a name="[1e6]"></a>Vector&lang;IButtonListener*&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, buttonsmanager.o(t._ZN6VectorIP15IButtonListenerED1Ev), UNUSED)

<P><STRONG><a name="[a1]"></a>Vector&lang;IButtonListener*&rang;::operator [](unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, buttonsmanager.o(t._ZN6VectorIP15IButtonListenerEixEj))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsManager::NotifyListeners(unsigned)
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[171]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterSensor::read_sensor(double&)
</UL>

<P><STRONG><a name="[174]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[177]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[17a]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON::parse_alarms_internal(Vector&lang;JSON::jsmntok_t&rang;&, const char*, Vector&lang;SmartPointer&lang;Sensor&rang;&rang;&)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm::will_alarm(double)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[179]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MockSensor::read_sensor(double&)
</UL>

<P><STRONG><a name="[1e7]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm::will_alarm(double)
</UL>

<P><STRONG><a name="[17b]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[17d]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[173]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[176]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm::will_alarm(double)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[17c]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1e8]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[17e]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[172]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[7d]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[178]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[167]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[145]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[13e]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[13d]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[180]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9a]"></a>SetSysClockTo72</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, system_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[99]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[74]"></a>__sti___18_ButtonsManager_cpp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, buttonsmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sti___18_ButtonsManager_cpp &rArr; Vector&lang;IButtonListener*&rang;::ResizeBuffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector&lang;IButtonListener*&rang;::ResizeBuffer(unsigned)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonsmanager.o(.init_array)
</UL>
<P><STRONG><a name="[a3]"></a>NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, buttonsmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsManager::ButtonsManager()
</UL>

<P><STRONG><a name="[75]"></a>__sti___15_TimeManager_cpp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timemanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___15_TimeManager_cpp &rArr; TimeListenersList::TimeListenersList() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeManager::TimeManager()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeListenersList::TimeListenersList()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timemanager.o(.init_array)
</UL>
<P><STRONG><a name="[17f]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[175]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[12b]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[52]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>_fp_value</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[54]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>__default_terminate_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
